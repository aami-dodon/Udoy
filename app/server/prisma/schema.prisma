generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
  INVITED
}

enum GuardianLinkStatus {
  PENDING
  APPROVED
  REVOKED
}

enum GuardianRelationship {
  PARENT
  LEGAL_GUARDIAN
  COACH
  SPONSOR
  OTHER
}

enum AuditEventType {
  USER_REGISTERED
  USER_LOGIN
  USER_LOGOUT
  USER_DEACTIVATED
  USER_REACTIVATED
  USER_ROLE_ASSIGNED
  USER_ROLE_REMOVED
  USER_PROFILE_UPDATED
  ROLE_CREATED
  ROLE_UPDATED
  PERMISSION_CREATED
  PERMISSION_UPDATED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  EMAIL_VERIFICATION_SENT
  EMAIL_VERIFIED
  GUARDIAN_INVITED
  GUARDIAN_APPROVED
  SESSION_ISSUED
  SESSION_REVOKED
  TOKEN_ROTATED
}

enum VerificationTokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  GUARDIAN_APPROVAL
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SCHEDULED
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  passwordHash    String?
  firstName       String?
  lastName        String?
  dateOfBirth     DateTime?
  phoneNumber     String?
  isEmailVerified Boolean    @default(false)
  status          UserStatus @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deactivatedAt   DateTime?
  guardianName    String?
  guardianEmail   String?
  guardianConsent Boolean    @default(false)

  roles                        UserRole[]
  sessions                     Session[]
  auditLogs                    AuditLog[]             @relation("UserAuditLogs")
  guardianLinks                GuardianLink[]         @relation("GuardianLinksGuardian")
  wardLinks                    GuardianLink[]         @relation("GuardianLinksStudent")
  tokens                       VerificationToken[]
  assignedRoles                UserRole[]             @relation("UserRoleAssignedBy")
  assignedPermissions          RolePermission[]       @relation("RolePermissionAssignedBy")
  profile                      UserProfile?
  coachingAssignments          UserProfile[]          @relation("CoachAssignments")
  createdNotificationTemplates NotificationTemplate[] @relation("NotificationTemplatesCreated")
  updatedNotificationTemplates NotificationTemplate[] @relation("NotificationTemplatesUpdated")
  notifications                Notification[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  resource    String
  action      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  assignedAt   DateTime @default(now())
  assignedById String?

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedBy User?      @relation("RolePermissionAssignedBy", fields: [assignedById], references: [id])

  @@id([roleId, permissionId])
}

model UserRole {
  userId       String
  roleId       Int
  assignedAt   DateTime @default(now())
  assignedById String?

  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedBy User? @relation("UserRoleAssignedBy", fields: [assignedById], references: [id])

  @@id([userId, roleId])
}

model Session {
  id               String    @id @default(cuid())
  userId           String
  refreshTokenHash String
  userAgent        String?
  ipAddress        String?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?
  replacedById     String?

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replacedBy Session?  @relation("SessionReplacement", fields: [replacedById], references: [id])
  replaces   Session[] @relation("SessionReplacement")

  @@unique([refreshTokenHash])
}

model GuardianLink {
  id           String                @id @default(cuid())
  guardianId   String
  studentId    String
  relationship GuardianRelationship?
  status       GuardianLinkStatus    @default(PENDING)
  consentedAt  DateTime?
  revokedAt    DateTime?
  createdAt    DateTime              @default(now())

  guardian User @relation("GuardianLinksGuardian", fields: [guardianId], references: [id])
  student  User @relation("GuardianLinksStudent", fields: [studentId], references: [id])

  @@unique([guardianId, studentId])
}

model VerificationToken {
  id         String                @id @default(cuid())
  userId     String
  type       VerificationTokenType
  tokenHash  String
  expiresAt  DateTime
  consumedAt DateTime?
  metadata   Json?
  createdAt  DateTime              @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, tokenHash])
  @@index([userId, type, expiresAt])
}

model AuditLog {
  id         String         @id @default(cuid())
  actorId    String?
  eventType  AuditEventType
  resource   String
  resourceId String?
  metadata   Json?
  createdAt  DateTime       @default(now())

  actor User? @relation("UserAuditLogs", fields: [actorId], references: [id])
}

model NotificationTemplate {
  id            String              @id @default(cuid())
  name          String
  eventKey      String
  channel       NotificationChannel
  locale        String              @default("en")
  subject       String?
  body          String
  previewText   String?
  dataSchema    Json?
  defaultData   Json?
  audienceRoles String[]            @default([])
  active        Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdById   String?
  updatedById   String?

  createdBy     User?          @relation("NotificationTemplatesCreated", fields: [createdById], references: [id])
  updatedBy     User?          @relation("NotificationTemplatesUpdated", fields: [updatedById], references: [id])
  notifications Notification[]

  @@unique([eventKey, channel, locale])
  @@index([eventKey, channel])
}

model Notification {
  id             String               @id @default(cuid())
  userId         String?
  recipient      String?
  channel        NotificationChannel
  status         NotificationStatus   @default(PENDING)
  priority       NotificationPriority @default(NORMAL)
  eventKey       String
  templateId     String?
  locale         String               @default("en")
  subject        String?
  body           String?
  data           Json?
  metadata       Json?
  errorMessage   String?
  idempotencyKey String?              @unique
  attemptCount   Int                  @default(0)
  scheduledAt    DateTime?
  sentAt         DateTime?
  deliveredAt    DateTime?
  cancelledAt    DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  template NotificationTemplate? @relation(fields: [templateId], references: [id])
  user     User?                 @relation(fields: [userId], references: [id])
  logs     NotificationLog[]

  @@index([userId])
  @@index([eventKey])
  @@index([channel, status])
}

model NotificationLog {
  id             String             @id @default(cuid())
  notificationId String
  status         NotificationStatus
  attempt        Int                @default(1)
  metadata       Json?
  errorMessage   String?
  createdAt      DateTime           @default(now())

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
}

model UserProfile {
  userId                String   @id
  avatarUrl             String?
  bio                   String?
  location              String?
  timezone              String?
  className             String?
  learningLanguages     String[] @default([])
  learningTopics        String[] @default([])
  learningPace          String?
  linkedCoachId         String?
  subjectExpertise      String[] @default([])
  profession            String?
  education             String?
  teacherSpecialties    String[] @default([])
  coachingSchedule      String?
  coachingStrengths     String[] @default([])
  assignedStudents      String[] @default([])
  organizationName      String?
  sector                String?
  primaryContact        String?
  pledgedCredits        Int?
  notificationSettings  Json?
  accessibilitySettings Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedCoach User? @relation("CoachAssignments", fields: [linkedCoachId], references: [id])

  @@index([linkedCoachId])
}

enum TopicStatus {
  DRAFT
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum TopicReviewDecision {
  APPROVED
  CHANGES_REQUESTED
  COMMENT
}

model TopicGroup {
  id               String                    @id @default(cuid())
  slug             String?                   @unique
  defaultLanguage  String
  summary          String?
  createdById      String?
  updatedById      String?
  archivedAt       DateTime?
  metadata         Json?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  topics           Topic[]
  tags             TopicGroupTag[]
  alignments       TopicCurriculumAlignment[]
}

model Topic {
  id                String       @id @default(cuid())
  groupId           String
  language          String
  title             String
  summary           String?
  content           Json
  status            TopicStatus  @default(DRAFT)
  version           Int          @default(1)
  isLatest          Boolean      @default(true)
  createdById       String?
  updatedById       String?
  submittedById     String?
  reviewedById      String?
  publishedById     String?
  submittedAt       DateTime?
  publishedAt       DateTime?
  statusChangedAt   DateTime     @default(now())
  metadata          Json?
  accessibility     Json?
  notes             String?
  supersedesId      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  group             TopicGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  supersedes        Topic?       @relation("TopicRevisionChain", fields: [supersedesId], references: [id])
  revisions         Topic[]      @relation("TopicRevisionChain")
  workflowEvents    TopicWorkflowEvent[]
  reviews           TopicReview[]

  @@index([groupId])
  @@index([groupId, language])
  @@index([status])
  @@index([isLatest])
}

model Tag {
  id          Int              @id @default(autoincrement())
  name        String
  type        String           @default("classification")
  description String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  assignments TopicGroupTag[]

  @@unique([name, type])
}

model TopicGroupTag {
  groupId      String
  tagId        Int
  assignedById String?
  assignedAt   DateTime @default(now())

  group TopicGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tag   Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([groupId, tagId])
}

model TopicCurriculumAlignment {
  id           Int         @id @default(autoincrement())
  groupId      String
  framework    String?
  subject      String?
  standardCode String?
  gradeLevel   String?
  description  String?
  metadata     Json?
  createdById  String?
  updatedById  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  group TopicGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([framework, standardCode])
}

model TopicWorkflowEvent {
  id          String       @id @default(cuid())
  topicId     String
  actorId     String?
  fromStatus  TopicStatus?
  toStatus    TopicStatus
  decision    TopicReviewDecision?
  comment     String?
  metadata    Json?
  createdAt   DateTime     @default(now())

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([toStatus])
}

model TopicReview {
  id        String                @id @default(cuid())
  topicId   String
  actorId   String?
  decision  TopicReviewDecision
  comment   String?
  metadata  Json?
  createdAt DateTime              @default(now())

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([decision])
}
